// Generated by CoffeeScript 1.10.0
(function() {
  var H, S, block, identity, join, sprintf,
    slice = [].slice;

  identity = require("fairmont").identity;

  sprintf = require("sprintf");

  H = require("handlebars");

  S = require("swag");

  S.registerHelpers(H);

  join = function(d, array) {
    return array.join(d);
  };

  block = function(f) {
    return function() {
      var args, j, options;
      args = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), options = arguments[j++];
      if (options.fn != null) {
        return join("", f.apply(null, slice.call(args).concat([options.fn])));
      } else {
        return f.apply(null, slice.call(args).concat([identity]));
      }
    };
  };

  H.registerHelper({
    values: block(function(object, f) {
      var key, results, value;
      results = [];
      for (key in object) {
        value = object[key];
        results.push(f(value));
      }
      return results;
    }),
    filter: block(function(property, value, objects, f) {
      var j, len, object, results;
      results = [];
      for (j = 0, len = objects.length; j < len; j++) {
        object = objects[j];
        if (object[property] === value) {
          results.push(f(object));
        }
      }
      return results;
    }),
    pluck: block(function(property, objects, f) {
      var j, len, object, results;
      results = [];
      for (j = 0, len = objects.length; j < len; j++) {
        object = objects[j];
        results.push(f(object[property]));
      }
      return results;
    }),
    join: function(delimiter, array) {
      return join(delimiter, array);
    },
    sprintf: function(format, string) {
      return sprintf(format, string);
    },
    hang: (function() {
      var indent;
      indent = function(x, s) {
        return (" ".repeat(x)) + s;
      };
      return function(i, w, s) {
        var first, line, m, ref, rest;
        m = w - i;
        ref = s.match(RegExp(".{1," + m + "}(\\s+|$)", "g")), first = ref[0], rest = 2 <= ref.length ? slice.call(ref, 1) : [];
        return [first].concat(slice.call(((function() {
            var j, len, results;
            results = [];
            for (j = 0, len = rest.length; j < len; j++) {
              line = rest[j];
              results.push(indent(i, line));
            }
            return results;
          })()))).join("\n");
      };
    })()
  });

  module.exports = function(template, context) {
    return (H.compile(template, {
      noEscape: true
    }))(context);
  };

}).call(this);
